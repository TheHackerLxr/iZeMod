plugins {
    id "java"
    id "idea"

    id "fabric-loom" version "1.10-SNAPSHOT"
}

base {
    group = project.maven_group
    archivesName = project.maven_name
    version = project.maven_version
    description = project.maven_description
}

loom {
    accessWidenerPath = file("src/main/resources/izemod.accesswidener")
}

configurations {
    jij // jar in jar configuration
    modJij // jar in jar configuration for mods

    include.extendsFrom modJij
    modImplementation.extendsFrom modJij
    modCompileOnlyApi.extendsFrom modJij

    // Include VV dependencies as jij
    jij.extendsFrom vvDependencies
}

repositories {
    mavenCentral()
    maven {
        name = "ViaVersion"
        url = "https://repo.viaversion.com"
    }
    maven {
        name = "Lenni0451"
        url = "https://maven.lenni0451.net/everything"
    }
    maven {
        name = "OpenCollab Snapshots"
        url = "https://repo.opencollab.dev/maven-snapshots/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"

        content {
            includeGroup "com.github.Oryxel"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "com.viaversion:viafabricplus-api:4.0.2"
    modRuntimeOnly "com.viaversion:viafabricplus:4.0.2"
}

processResources {
    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
                "description": project.description,
                "mcVersion": mcVersion()
        )
    }
}

String mcVersion() {
    if (project.supported_versions.isEmpty()) {
        return project.minecraft_version
    } else {
        return project.supported_versions
    }
}

java {
    withSourcesJar()
    withJavadocJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}


jar {
    // Rename the project's license file to LICENSE_<project_name> to avoid conflicts
    from("LICENSE") {
        rename {
            "${it}_${project.archivesBaseName}"
        }
    }
}

idea {
    module {
        ["run"].each {
            excludeDirs << file("$it")
        }
    }
}
